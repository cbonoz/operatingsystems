# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Chris Buonocore
Student ID: 904587506
Email: cbuonocore@ucla.edu

# Partner 2
Name: Yuanchen Liu
Student ID: 503392352
Email: yuanchen@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

We mirrored the forking implementation in lab 1 to enable parallel downloads and uploads of files.


# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

1. Fixed buffer overflow that could occur if the user's filename size is greater than the size of our filename buffer (returns an error if the requested filename is too long on the command line) - replaced strcpy with strncpy for copy check safety (where appropriate)
2. Added a check for the t->filename not to exceed the size of the disk/task filename size
3. Expanded task buffer to support more peers (in case of overflow of peers, such as in run-popular mode)

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

1. Capped the file download size that could be initiated (limited to 2ÃŸ0MB) to prevent attackers from loading the disk with single requests. If you want larger files than this, can do partial file downloads that still fit within this cap.
2. If the user makes a download request that exceeds the size of the task buffer, this is also prevented.
3. See notes below for more relevant information


# Add any other information you'd like us to know below this line.

When all the active upload tasks have completed (or invalid tasks have been removed), then system will idle and state "Listening for next upload task." This is nromal behavior we have defined.

For make run-bad, tasks which involved files that are too large will get removed from the active tasks list (so they aren't rerun uneccessarily)

Occassionally the peers will not connect (this is a tracker-based issue.) If you rerun make-popular for example and the tracker side works correctly with no refusing connections, the output will work as expected - without being flooded.

Set the max file size to 20MB to prevent run-bad flooding - larger files should be done piecewise.




Example outputs below

====


[chris@lnxsrv01 ~/Documents/lab4]$ make run-popular
+ mkdir test
+ ./osppeer -dtest -t13000 cat1.jpg cat2.jpg cat3.jpg
* Tracker's greeting:
200-Welcome to the OSP2P tracker!
200-You will be timed out after 600 seconds of inactivity.
200 Try 'HELP' to get a list of commands.
* Listening on port 11157
* Tracker's response to our IP address registration:
220-This tracker is set up to ignore external peers,
220-so that you don't have to worry about problems caused by other students.
220 The address registration has been ignored.
* Registering our files with tracker
* Finding peers for 'cat1.jpg'
* Connecting to 127.0.0.1:11126 to download 'cat1.jpg'
* Finding peers for 'cat2.jpg'
* Saving result to 'cat1.jpg'
* Downloaded 'cat1.jpg' was 14076 bytes long
* Connecting to 127.0.0.1:11127 to download 'cat2.jpg'
* Finding peers for 'cat3.jpg'
* Saving result to 'cat2.jpg'
* Downloaded 'cat2.jpg' was 9531 bytes long
* Connecting to 127.0.0.1:11125 to download 'cat3.jpg'
* Saving result to 'cat3.jpg'
* Downloaded 'cat3.jpg' was 106110 bytes long

[chris@lnxsrv01 ~/Documents/lab4]$ make clean; make run-bad
rm -f *.o *~ osptracker osptracker.cc osppeer
+ cc osppeer.c
+ cc md5.c
+ cc writescan.c
+ ld osppeer
+ mkdir test
+ ./osppeer -dtest -t13001 cat1.jpg cat2.jpg cat3.jpg
* Tracker's greeting:
200-Welcome to the OSP2P tracker!
200-You will be timed out after 600 seconds of inactivity.
200 Try 'HELP' to get a list of commands.
* Listening on port 11157
* Tracker's response to our IP address registration:
220-This tracker is set up to ignore external peers,
220-so that you don't have to worry about problems caused by other students.
220 The address registration has been ignored.
* Registering our files with tracker
* Finding peers for 'cat1.jpg'
* Finding peers for 'cat2.jpg'
* Connecting to 127.0.0.1:11130 to download 'cat1.jpg'
* Saving result to 'cat1.jpg'
* Finding peers for 'cat3.jpg'
* Connecting to 127.0.0.1:11128 to download 'cat2.jpg'
* Saving result to 'cat2.jpg'
* Connecting to 127.0.0.1:11128 to download 'cat3.jpg'
* Saving result to 'cat3.jpg'
* Canceled Task for 'cat2.jpg': File size too long (> 20 MB): Address already in use
* Canceled Task for 'cat1.jpg': File size too long (> 20 MB): Address already in use
* Canceled Task for 'cat3.jpg': File size too long (> 20 MB): Address already in use
* Listening for next upload task


Connect to SEAS linux server:
ssh username@lnxsrv.seas.ucla.edu	